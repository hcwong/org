#+TITLE: CS2107
#+AUTHOR: Joshua Wong

#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}

* Lecture 1

** Definitions
1. *Threat* is the set of circumstances that have an ability to harm
2. *Vulnerability* is the weakness is the system

This is commonly generalized as the *asset-threat-vulnerability-control model*.

1. *Confidentiality* is to ensure that info is only viewed by authorized parties. Also known as privacy
2. *Integrity* is to ensure that asset is only modified by authorized party
3. *Availability* is to ensure that asset can only be used by authorized party at any time
4. *Authenticity* is logins, password checks, msg sender/origin etc - asset is from the source it claims to be.
5. *Accountability*, such as the non repudiation of a prior agreement.

** Encryption
Cryptology vs Cryptography - Study of codes vs study of techniques in securing comms in the presence of adversaries. Encrpytion is one of the primitives in cryptography.

#+CAPTION: Encryption process
#+ATTR_ORG: :width 600
[[file:./images/cs2107_l1_1.png]]

*** Requirements for encryption
1. \(D_k(E_k(x))\) where \(k\) is the key. This is known as correctness.
2. Must be difficult to get useful information from the ciphertext.
3. Efficent decryption and encryption. (polynomial time)

* Lecture 2
** Attacking cryptography

The first way to do this is via exhaustive searching, that is, trying out all the possible keys in the key space
and then hoping that you get the right answer. This is of course bounded by the key space and the key space size

Next is the known plaintext attack. Given a plaintexxt and the corresponding cipher text, check if it is possible to get the key

Lastly, the ciphertext only attack. This checks whether given only the cipher text, the plain text can be decrypted.

** Classical Ciphers

+---------------------+-------------------+------------------+-----------------------------+-------------------------+
| Name                | Description       | Insecure under   | Insecure under cipher text  | Remarks                 |
|                     |                   |plain text        |                             |                         |
+---------------------+-------------------+------------------+-----------------------------+-------------------------+
| Substitution Cipher | 1-1 mapping of    | Yes, given long  | Yes, frequency analysis     |                         |
|                     |letter to letter   |enough cipher text|                             |                         |
+---------------------+-------------------+------------------+-----------------------------+-------------------------+
| Vigenere (Shift)    | Use a keyword to  | Yes              |   Yes, if we can find the   | See Kasiski method      |
|                     |as key             |                  | length of the period, k, we |                         |
|                     |                   |                  |  can do frequency analysis  |                         |
+---------------------+-------------------+------------------+-----------------------------+-------------------------+
| Permutation         | Group into blocks | Yes              | Yes, check if permutation   |                         |
|                     |of t, then permute |                  |gives valid word             |                         |
|                     |    each block     |                  |                             |                         |
+---------------------+-------------------+------------------+-----------------------------+-------------------------+
| One Time Pad        |Using n bit key and| You can, but the |    No, not clear how to     | Key must be as long as  |
|                     |n bit message, XOR |  key is useless  | exhaustive search and leaks |   message and sent on   |
|                     |     each bit      |  (one time use)  | no info apart from msg size |secure channel so not too|
|                     |                   |                  |                             |          good           |
+---------------------+-------------------+------------------+-----------------------------+-------------------------+

*Kasiski method: Look for same letter blocks in the cipher text and see how far they are apart. This might gives clues about the period/keyword size of vigenere.

** Security

*** Review
Formula can be represented as \(G, E, D\) over \(K, M, C\) where G is the key generator, E encryption, D decryption, K the key set, M the plaintext set and C is the ciphertext set

- Requirement: For all \(\forall m \in M\) and \(\forall k \in K\), \(D_k(E_k(x))\).
- Efficiency: G, E, D should run in polynomial time
- Security: Attacker cannot recover secret key or plaintext

*** Perfect Security
Regardless of any prior info attacker has, with unlimited power, cipher text should leak nothing about plain text.

But for this to occur, key must be as long as plaintext => impractical

*** Computational Security
Okay if cipher leaks some info with tiny probability to attacker with bounded computational resources. Failure is considered negligible in practice.

We measure the strength by the estimated number of bits in the key or equivalent exhaustive search => aim for 2^128 and above. For example, even though RSA has 2048 bits, it has exploits that make its search take around 2^112, so it is a 112 bit strength key.

** Modern Ciphers

Take into account all attacks, and no exploits should be faster than exhaustive search.

#+NAME: Block cipher
#+ATTR_ORG: :width 300
[[file:images/cs2107_l2_1.png]]

#+NAME: Stream cipher
#+ATTR_ORG: :width 300
[[file:images/cs2107_l2_2.png]]

#+NAME: Stream vs block cipher
#+ATTR_ORG: :width 300
[[file:images/cs2107_l2_3.png]]

*** Stream Ciphers

Given a secret key of smaller size, generate a sequence of same size as message, and then take sequence as key in one time pad.

There are some constraints. Firstly, the key generator must generate a cryptographically secure psuedorandom sequence called the key stream. Cryptographically secure means that it must pass all efficient statistics test and be unpredictable. Psuedorandom means that it should be indistinguishable from random set.

The psuedorandom generator should map a seed space to an output space in a deterministic fashion. However, this is not good as same seed == same keystream (two key issue in one time pad).

Initial Value (IV) is the solution to this. IV can be a random value or chosen form a counter. A long sequence is generated from secret key using IV as seed. The final cipher text contains the IV, else the recieving end also cannot generate the key to decrypt.

IV is important as without the IV, given a plaintext message X and Y, if the attacker eavesdrops and obtains the corresponding cipher texts U and V, it can get the message X XOR Y, which may be bad for messages like images.
But with different keys from different IVs, the result is (X XOR Y) XOR (K1, K2), where K1 is not K2.
* Lecture 3
** Block Cipher
Is an important crypto primitive. For block cipher, M = C = {0, 1}^n with n = block size

The longer the key is, the more secure the scheme but the slower it is.

** Keyed Pseudorandom Permutation - E: K x X -> X
- There exists an efficient deterministic algo to evaluate E(k, x)
- Output looks random
- E is bijective and hence length preserving
- There exists efficient inversion algorithm (decryption)

The block cipher can be seen as a permutation function that maps 2^n plaintext to 2^n cipher text.
The permutation is determined by the key and different key should be mapped to different permutation. This is done by
the adorementioned keyed psuedorandom permutation.

** How Block Cipher works
An iteration of rounds. So there exist a round function f(x, k), where k may have undergone preprocessing like key expansion. In each round, the same round function is used, but the round key (subkey) is different. n different roundkey for n rounds.

** DES
Has a block size of 64 and key size of 56.

It works in 16 rounds using Feistel round function. Feistel has a substitution box for confusion and a permtutation for permutation. But this is broken

One option is to use double DES, though this can be broken by meet in the middle attack. 3 DES is okay but is is 3 times slower and only has block size of 64.

** AES
Block size of 128 bits and key size of 128, 192, or 256 bits. It uses a substitution and permutation network, different from Feistel. Currently secure.

AES is probabilistic if we use a randomly chosen IV.

** Properties
Diffusion - change in plaintext will affect many parts of the cipher text.

Confusion - an attacker should not be able to predict what happens to cipher text when one character in plaintext changes.

** Mode of operations of Block Cipher
*** ECB
Use same key for each block of plaintext - But if we do this, then if two plaintext blocks are the same, so will their ciphertext.
*** Cipher Block Chaining
Use an IV at first, then XOR with the first block, encrypt, and use that as first box of cipher text. Pass this first block also as IV to the next block and so on.
*** Counter Mode
Increment IV for each block => then we encrypt the IV and XOR with the block like in one time pad to generate the output.

** Attacks
*** Meet in the Middle
This has been explained in the earlier section under DES.
*** Padding Oracle Attack
Given a cipher text and IV, the Padding Oracle lets us know if the plaintex has the correct padding format. We pad when the last block of plaintext is not the same size as the block size, the pad.
Standard padding formats include PKCS#7.

In CBC decryption, each cipher text is passed through the decryption cipher, and XORed with the previous cipher text.

#+TITLE: Figure 1
#+ATTR_ORG: :width 400
[[file:images/cs2107_l3_1.png]]


Change each relevant byte of C1' and XOR with the decrypted key until you get a plaintext P_2 with the correct padding value. Then XOR P_2's byte with the corresponding C1' byte to get the I_2 byte. Because I_2 is the actual decrypted value of the actual cipher text, you can now XOR with the corresponding byte from the real cipher text C to get the actual plaintext value P.
** Security Analysis of a Cipher
Is done with respect to the thread model asd the security guarantee (what we do not want attacker to accomplish)
*** Black box threat model
Attacker sees what gets in and out of a cipher - cannot see secret key. Cipher text only and known plaintext attacks fall under this model.
*** Gray box
Attacker has access to a cipher's implementation.

Side channel attacks take advantage of information that depends on impl of cipher, like power consumption etc.
Invasive attacks are more invasive and do not just observe/measure analog characteristics.
** Reusing IV
Some programs overlook IV generation - like just using filename -  and this is not secure.

** Kerckhoff's Principle
System should still be secure even if everything about the system except the secret key is public knowledge.

** Security through Obscurity
We can use security via obscurity if its part of a multi-layered defense.

* Lecture 4
** Authentication
Process of ensuring that the communicating entity is the one it claims to be:
1. Entity authentication
2. Data-origin authentication - communicating entity is the origin of a piece of information (digital signature).

Data-origin authenticity \(\implies\) data integrity, but not the converse, as authenticity is a stronger requirement than integrity.

** Password (Weak authentication)
Identity is not a secret, but password is. Password is considered weak authentication because it is one that is subjected to simple replay attack.
*** Bootstrap
Server and User establish a common password
*** Authentication
Server generates an entity.

** Attacking Password
*** Attack Bootstrap
- If there are deafult passwords, can try attacking.
- Guess password. In online guessing, directly interact with the authentication system. In offline, attacker can obtain from the authentication system.
- Exhaustive search is an option if there's no fixed password length.
*** Stealing
- Shoulder surfing
- Sniffing communication or sniffing wireless keyboard.
- Key logger
- Login spoofing
- Phishing
- Password Cache
- Insider attack

** Protecting Password
- Use strong password
- Protect password through means like special characters, change password
- Protecting password file through means like salt-based hashing

** Security Questions
Mechanism for fallback authentication

Criteria:
- Memorable
- Consistent
- Nearly universal
- Safe

** ATM Attack
Card's magnetic strip contains the account ID, so add the card reader to read the ID and then spoof the password to get id and password.

** Biometric
Use unique physical characteristics of a person. During enrollment, reference template of user's biometric data is constructed and stored. Then the verification, the biometric is compared to the template using matching algorithm.
However, this is not always 100% correct (See false match rate vs false non match rate).

The threshold for FMR and FNMR can be adjusted. Other errors include failure to enroll or failure to capture (during verification).

** n-factor authentication
Require at least 2 different factors for authentication.

SMS OTP is actually not too secure because of interception of cellular network's channel.

* Lecture 5
** Asymmetric key scheme
Uses two keys: public key is for encryption, private key for decryption.

But now we have to distinguish the sets clearly: \(K_e, K_d, M, C\) where \(K_e\)  \(K_d\) are the public and private key sets respectively.

The encryption scheme is also now a one-way function. Encryption can be done using public key only, but decryption is not feasible without private key.
This function E() is called trapdoor function, and the trapdoor is \(k_d\).

Also an added requirement that it is difficult to derive private key from pub key.

*** Advantage
We have less keys to manage on a while, as with secret key, both parties need same set of secret key. But with asymmetric, only public key need to be exchanged.

** RSA
Note that classroom RSA is the one being introduced.
*** Setup
1. Choose two large primes p q and n = p.q
2. Owner then randomly chooses encryption exponent and then derive decyption exponent.
  
#+NAME: RSA
#+ATTR_ORG: :width 300
[[file:images/cs2107_l5_1.png]]

**IMPORTANT:** RSA is also has a special property in which we can use decryption key to encrypt and then encryption key to decrypt.

*** Security
Difficulty of getting private key from public key is as hard as factorizing n.

Similar to symmetric key encryption, some form of IV is required so that encryption gets randomized.

Factorization can also be efficiently done by quantum computer.

** Insecure RSA
*** Using RSA as symmetric key
Issue 1 is that RSA is significantly slower than AES, though this can be mitigated somwhat if we use AES to encryypt file and then RSA to encrypt the AES key.

Issue 2 is that ECB with RSA could also leak more information.

Issue 3 is that RSA is not necessarily more secure than AES. Because it is not known if problem of getting plain text from cipher text and public key is as hard as factorization.

** Unkeyed hash
A function that takes an arbitrarily long message as input and outputs a fixed-size digest (smaller than the message).

Examples of the unkeyed hash function include the SHA-X variants.

Requirements:
1. Efficient
2. Given a digest, hard to find the message (one way)
3. Collision resistance => hard to find 2 messages with the same digest.

Unkeyed hash can be used to determine data integrity. If the digest of the authentic source is obtained via *secure channel*, then we can check if the digest is the same.
Authenticity cannot be compared as the original digest could have been spoofed.

** Keyed hash
A function that takes in secret key to produced fixed size Message Authentication Code (MAC).
Now you need the key to produce the exact same message. Popular models include CBC-MAC and HMAC.

MAC can be used to determine authenticity. If the key is known to both parties, then we can determine whether the MACs of the two files are the same.

** Digital Signature
Is the asymmetric version of MAC. Signature provides both authenticity and non-repudiation. The private key is used to encrypt in the hash and the public key is used on the client side to generate the digest.

The algorithm sign() is used to mean that encryption with private key and verify() is the decryption with the private key.

Non-repudiation means that the signer cannot deny that the file came from her. With digital signature, non repudiation is clear because only one person knows the private key.

#+NAME: Signaturee Process
#+ATTR_ORG: :width 400
[[file:images/cs2107_l5_2.png]]

** Attacks on hash
*** Hash and Birthday Attack
Instead of brute forcing the search space, we do a comparison between each pair to see if the result is the same.

Supposed we have M messages, and all messages are tagged with a random value from 1..T.
If M > \(1.17 . T^{0.5}\), then the \(P_{collision}\) > 0.5.
Hence, the recommendation of digest is at least double of key length.
** Encryption
Encryption is not designed to provide integrity and authenticity - only designed to provide confidentiality.

Cipher text is malleable if it is possible to modify a cipher text and cause a predictable change to the plaintext.

* Lecture 6
** Public Key Distribution
If public key is distributed insecurely, then people can hijack it, send a fake public key to the person doing encrypting and then decode the response.

#+NAME: Secure Channel Requirements
#+ATTR_ORG: :width 400
[[file:images/cs2107_l6_1.png]]

*** Public Announcement
Owner just broadcast public key.

Limitation is that it we still have to trust the website.

*** Publicly available directory
We put public keys in a directory.

Limitation is that we still have to trust the directory and what it says it is.

*** PKI + Cert
PKI is a standardized system that distributes public keys.

PKI has two key components: Cert and Cert Authority.

A CA issues and signs digital certs, it has a directory of pub keys and its own pub-private key pair. There are also strict operational requirements for a CA.

A cert is a digital document that contains the identity of the owner, pub key, validity and signature at the minimum.
Cert allows us to verify public keys without having to ping the directory server everytime which can become a bottleneck.
However, we still need to verify the validity of the certificate. But we can have multiple online CRL distribution points.

Distinguished Name is used identify and entity (issuer and subject names). It usually has a few attributes, including a common name.

Summary: Cert is simply a document signed by a CA that specifies an identity, associated public key, window during which it is valid and signature of the CA.

**** Responsibility of CA
CA also needs to verify that the information is correct. This may involve some manual checking and especially for the extended validation SSL certificates (this involves some legal identity check).

CA also checks Domain Validation, Organization Validation SSL certs before issuing cert.

**** Certification Chain
A list of certs starting with an end-entity cert followed by one or more CA certificates. The last cert is the root CA's, known as trust anchor.

For each cert, the issuer matches the subject of the next cert in the list and is signed by the private key of the next cert in the list.
**** Cert Revocation
Non expired certs can be revoked for different versions, so we have to check if non expired certs are valid. We can either do a certificate revocation list (CRL) or online cert status protocol (OPSP) to do the revocation/validation.

However, OCSP comes at the cost of privacy as the OCSP responder knows what certs you're valuidating, and sometimes there is no reply, which some browsers will take as permission to proceed (soft-fail validation).

To solve this, we can either do OCSP stapling or make it part of TLS handshake, at the cost of increased network cost.

*** CA Weaknesses
- Rogue CA
- Weak Browser trust model
- MITM by rogue CA
- Null Byte Attack
- Social Engineering and typosquatting

* Lecture 8
** Strong Authentication
If shared key, first encrypt a random m, then send it to the other party to decrypt and check the response.

If PKC, then Bob can choose random number r for Alice to sign using private key, then send signature with Alice cert. Then Bob can check if public key matches the signature.

The random m/r is the cryptographic nonce.

But this may not be sufficient if the session can be interrupted. For example, after the strong authentication, Mallory could interrupt and impersonate Alice.

** Unauthenticated Key Exchange
The first method is to use PKC based key exchange by generating a public/private key pair to generate a session key.

The second is the Diffie-Hellman Key Exchange.
[[file:images/cs2107_l8_1.png]]

However, there is no entity authentication so it is still vulnerable to MITM.
** Authenticated Key Exchange
Unilateral Authentication using a signature is also possible.
[[file:images/cs2107_l8_2.png]]

For mutual authentication, both parties must know a way to know each other's public key.

** Secure Communication Channel Problem
Confidentiality is protected using encryption using k as key.
Authenticity is protected by MAC using t as key.

** TLS
1. Ciphers Negotiation
2. Authenticated Key Exchange
3. Symmetric key based secure comms
4. Renegotiation if necessary.

[[file:images/cs2107_l8_3.png]]

Protocol is just a set of rules for exchanging information, and is described as a steps of actions to be carried by the entity along with the data to be transmitted

* Lecture 9
** Authenticated Encryption
*** E&M
Encrypt and Mac, the sender computes cipher text and tag separately, and sends them both.
*** Mac then Encrypt
Get the MAC, then concatenate it to the plaintext to form single cipher text
*** Encrypt then Mac
First we compute cipher text then pass cipher text and the MAC key into the hash function to form the MAC. This benefit of this is that if the MAC is wrong, we don't have to perform decryption.
*** Authenticated Cipher
Returns an authentication tag along with the ciphertext.
** Network Security
Layer-N protocol is built on top of a virtual connection of the layer below.
[[file:images/cs2107_l9_1.png]]

However, the system is vulnerable to modification, fabrication, interruption and interception. For example, attacker at any layer can modify data and the header, and do things like spoof source ip address.

** Name Resolution and Attacks
DNS maps domain name to IP address and ARP associates IP address to physical address.

For example, an attacker at the physical layer could perhaps send a false response with a fake ip address when someone is calling a DNS server.
** Denial of Service
[[file:images/cs2107_l9_2.png]]

*** Attack Types
Local attacks are easily tracked.

Sending Malformed attack remotely does not usually work on updated OSes.
Attacker may also amplify small traffic to obtain large traffic - Like in the ICMP flood attack.

** DDOS
Distributed, so attacker might use something like a botnet to attack. Attacker usually has a command and control mechanism to control the attack. Covert channels are usually used by a botnet.

** Useful Tools
- Wireshark for capturing stuff a the link layer
- Nmap for scanning for open ports on hosts in a network

** Firewall
Need a way to control the flow of traffic between untrusted public internet and trusted internal network.

DMZ is a small sub-network that exposes org's external service to (untrusted) internet

Sit at the border to control egress and ingress traffic. The firewall table is processed a top down manner and the first matching rule is taken.

*** Types of firewalls
- Filter packet based on info in packet header
- Stateful inspection: Maintains a state table of active connection and filters based on connection state
- Application proxy: Relays application level traffic.

** Cryptography for Securing Network Comm
There a few protocols, each usually working on a different layer. We have TLS/SSL, WPA2, IPSec.

When analyzing, we want to see what layer the attacker resides it to see what is protected (and not).
However, the general guideline is that a protocol that protects layer k will protect info from that layer and above from an attacker residing at layer k-1 and below.

SSL/TLS sits on top of transport layer and performs end to end encryption with a MAC for authenticity.

WPA2 protects link and physical layer, though not everything at link is protected. This is often used at Home Wifi access point.

IPSec provides integrity/authenticity for IP addresses but not confidentiality.

* Lecture 10: Access Control
Layers in a computer is less well defined because each layer has its own processes and data, and have to control access to it and make sure the process does not do anything funny.

Access control model gives a way to specify restrictions on subjects, objects and actions.
A subject wants to access an object with operation. The reference monitor is the one that grants or denies the access.
Principals are the human users and subjects are the entities in the system that do the accessing (like processes).

Accesses may be classified as observe, alter, and action (executing).

** Access Rights
DAC (UNIX uses this) means that the owner of the object decides the rights.
MAC means that a system wide policy decides te rights and must be followed by anyone in the system.

Access control is represented by either the access control list or access control matrix. ACL dtores the access rights to a particular object in the list.
ACL kinda looks like a linked list. Hence, the drawback is that it is hard to get the list of objects some user has access to.
In general, both matrix and list can get too large to manage as well.

** Intermediate Control: Group & Protection Rings
ACL specifies the rights for the following classes: user, group, others. Non owner subjects in the same group have the same access rights.

Protection rings are also used. Each process is assigned a number, which means it runs in a certain ring.
An object's number means that it is accessible in a certain ring. Lower Ring numbers means higher privilege.

** Unix Access Control
Unix treats all resources as file for simplicity.

Each Unix User has a unique login name and uid, and can belong to one more more group. First group is stored in //etc/passwd/.
The rest are stored in //etc/group/.
Each group has a unique group name and id.

Unix Principals are UIDs and Group IDs. Information of user account are stored in password file //etc/passwd/.
Root is super user with UID 0 and has no security checks. The password file is made world readable because some info is needed by non-root processes.

Unix subjects are processes with PID.

Search Path attacks can be prevented by using the full absolute path.

#+ATTR_ORG: :width 600
[[file:images/cs2107_l10_1.png]]

Set UID allows the process's effective user id to owner of executable file. Set GID is the same idea.

If the directory has a sticky bit, then it can only be deleted only by the owner of the file.

*** Controlled Invocation
Allows an operation in super user mode instead of changing the permission bit of an executable file that targets the resource. This is done via privilege escalation, on the set-UID bit.

However, this bridge must be implemented correctly, else it is a security vulnerability.

* Lecture 11
** Von Neumann Architecture
Code and Data are stored together in memory -> If input data is treated as code, then we get a code-injection attack.
** Control Flow attacks
This attack leverages on the jump instruction to compromise process integrity. This can be done by modifying the control flow because instructions and data are just stored together in memory.

However, in general, memory attacks (where victims are tricked into writing to certain memory locations) as each process can only write to a small amount of memory.
** Attacks on Software
*** Integer Overflow
Integer arithmetic relies on modulo arithmetic.
*** Data Representation Problem
For example, string representations could be represented differently, thus leading to vulnerability.

For example, null byte injection is a sample attack where there is a null byte in the host name.

Another problem comes with encoding types, for example there are multiple ways of representing a character based on the encoding system used (eg ascii or utf).
Other problems include whether to treat a number (lets say in an IP addr) as a 32 bit int or 8 bit char. This can help us bypass blacklist filters.
*** Buffer Overflow
Occurs when data is written beyond a buffer's boundary.
*** Stack Smashing
Occurs when the return address in the stack is overwritten by the stack as it appends more stack frames. But more often that not we get a segmentation fault.
However, if shellcode is executed after the stack smashing, then we might get more problems because there is arbitrary code execution.
*** Code Injection
SQL injection attack
*** Undocumented access points
This happens when certain backdoors used for dev mode are not removed in production.

** Defensive Measures
*** Input validation
Never trust user input. The two approaches to filtering are
- Whitelist: This is usually used as it is more secure.
- Blacklist
*** Bounds checking
Prevents buffer overflow.
*** Type checking
*** Memory protection
Canaries are secret values inserted at selected memory locations at runtime. This will help us detect if there is any overflow.
*** Memory Randomization
Address space layout randomization is a prevention technique that helps us to decrease attack chances.
This is because it is to the attackers' advantager when data and code is stored in the same location of memory.
*** Code inspection
This can be done by manual checking or automated checking. One example of automated checking is taint analysis.
*** Testing
White, grey and black box testing.

Fuzzing is a technique that sends malformed inputs to discover vulnerabilities.
*** Apply the principle of least privilege
*** Patching
However, the patch must be applied timely and at the right time, because patches may introduce downtime and bugs.

* Lecture 12
** Security Issue
Browsers run with the same privilege as the user.
Browsers also now store information about the user, in stuff like sessions and cookies.

** Attacker as another end system
Malicious web domain and web server.
** Active Attacker
One example of this is MITM and the another is one that sniffs and spoof packets.
** URI Attacks
*** Using characters
Such as those that resemble others to spoof websites, like replacing l with /.
*** Address bar spoofing
In early browsers, webpage can overlay address bar.
** Cookies
Three types: session, persistent and secure (HTTPS). Same origin for cookies is only compulsory for secure cookies.

Tokens must be random and sufficiently long. Also, if token is stored on browser side, the cookie should also have
a MAC to preserve integrity.

Same origin policy dictates that scripts can only access cookies if they have the same origin. Origin is defined as the combination of protocol, host name and port number.
However, there are many exceptions to this.
** XSS
Usually just takes the form of running arbitrary script. However, the attack takes the form of privilege escalation, they can also see stuff like cookies.

The defense usually just takes the form of sanitization.

** CSRF
aka "sea surf" or "session riding"
*** Mode of operation
Client is already authenticated with a target website S which accepts authentication-token cookie.
Attacker then tricks Client to click on a URL S in phishing email which maliciously requests for a service.
Client's cookie then is sent to S and the action will be carried out by S.

Can also take place without clicking - Client is authenticated with cookie.
Now Mallory has web server. The web server page embeds some sort of request in a subresource like `<img>`, so when Alice visits the website;
Alice's browser will issue the request with Alice Cookie.

*** Defenses
Integrity of the Client Request is compromised.
Authentication-token cookie is hence not sufficient. Server must issue and require dynamic information.

We add this in the form of a CSRF Token.

* Definitions
Format String Vulnerability - When the submitted data of an input string is evaluated as a command.

Buffer overflow - Program puts more data in a buffer than it can hold.

Integer overflow - Int is incremented to a value that cannot be stored in the associated representation.

XSS - Malicious scripts are being sent to end user machines and then executed.

CSRF - Forces user to execute unwanted actions on a web application in which they're currently authenticated.

SQL Injection - Injection of an SQL query via the input data from the client to the application.

Clickjacking - Tricks a user into clicking a webpage element that is invisible or disguised as another element.

Privilege Escalation - The act of exploiting a bug/flaw in OS to gain elevated access to resources that normally cannot be accessed.

Side-channel attack - Information gained from the implementation of a computer system as opposed to weaknesses in the algorithm.

Covert channel - Type of attack that creates a capability to transfer info objects between processes
that normally should not be allowed to communicate

Zero-day attack - Exploit vulnerability before it is fixed.

Typo squatting - Targets users that incorrectly type a website address.

Click Fraud - Repeatedly clicking on website advertisements to increase site revenue.

Phishing - A  that targets users by posing as a legit entity to get sensitive info.

Pharming - Redirect web-site's traffic to another fake site by either changing hosts file or exploiting DNS vulnerabilities.

Fuzzing - Provides unexpected data as input to a program to test if it works.

Mandatory Access control - OS constrains ability of subject to access or generally perform some sort of operation on an object.

Discretionary access control - Allows the user to make ability to make polo icy decisions, assign security attributes (aka UNIX)

Role-based access control - Restrict system access based on the roles of users.

Protection rings - Provides different layers of privilege within the architecture of a computer system.

Reference monitor - Enforces access control policy over subject's ability to perform operations on a system.
