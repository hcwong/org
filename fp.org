#+TITLE: Functional Programming Related stuff

* Lazy evaluation in JavaScript :LazyEvaluation:FP:
https://www.merrickchristensen.com/articles/lazy-evaluation-in-javascript/

** Thunks(Traditonal Way)
The normal way we perhaps might do this is in JS is perhaps with the usage of thunks

#+NAME: Normal Thunks
#+BEGIN_SRC js
const payCostLaterThunk = () => getExpensiveValue();
#+END_SRC

In this example, what we do is to replace an expensive value with a thunk. But this requires us to
update all usages of the payCostLaterThunk variable to make it a function call, which can be a bit troublesome

** Self overwriting Lazy getters (The real learning point)

This makes use of the JS object getter function

#+NAME: Self overwriting
#+BEGIN_SRC js
const code = (props) => {
  if (isExpensiveUseful(props.cheap)) {
    // Hey it's being access so it is time
    // to pay the fiddler!
    return doSomethingWithExpensiveArg(props.expensive);
  }

  return expensiveIsntEvenUsed;
};

const cheap = {
  /*..*/
};

code({
  cheap,
  // This code will only be run when someone
  // accesses `expensive`.
  get expensive() {
    // Don't forget to overwrite the value so you
    // only pay the cost once!
    delete this.expensive;
    // `this` is the object that contains `cheap` and our `expensive` getter.
    // Upon first retrieval we overwrite the getter with its value.
    return (this.expensive = getExpensiveValue());
  },
});
#+END_SRC

As seen, this method also does some form of implicit memoization, we could also make the memoization explicit,
with stuff like Lodash's once function or just via plain closures or properties

* Javascript scoping
For CS2104 Tutorial Presentation [[https://medium.com/@shilpasyal55/in-depth-analysis-of-variable-scoping-in-javascript-7ee3f832227f][(Source)]]

Binding of JS - In terms of scope.

Javascript has two main scopes:
1. Global
2. Local

Global scope applies to any variable declared outside a function scope. Variables declared with the /var/ keyword are also automatically placed as part of the window object if declared in the global scope.

Variables declared in a function are part of the function scope and cannot be accessed outside of that function.

ECMA6 introduced block scoping to be more mainstream -> blocks like loops instead of functions.

Inner functions always have access to outer function variables. This is called lexical scoping.

Variable shadowing - If the same variable is used in different scopes, the inner one shadows the outer one, as JS lookup table looks from the inner scope outwards => if cannot find, throws a reference error.

#+BEGIN_SRC js
// Global Scope
var a = 'b'

console.log(a) // gives 'b'
console.log(window.a) // gives 'b'

let c = 'd'
console.log(c) // gives 'd'
console.log(window.c) // gives undefined

function PetShopModule(animal){
    var publicAPI = {animalName, };
    return publicAPI;

   function animalName(name){
       console.log(`${name} is a ${animal}`)
   }
}

var animal = PetShopModule("Dog")
animal.animalName("Kim")   // "Kim is a Dog"
#+END_SRC

* A Pragmatic Introduction to Category Theory
[[https://www.youtube.com/watch?v=8XGFFMPHG0o][Talk here]]

Category is a collection of objects linked by a set of arrows (not an official definition). Categories obey two rules: composition and identity.
The composition operation is also associative, so the order does not matter.

A monoid is a structure that has a set and a binary operation. It obeys two rules: the operation is associative
and there exists an identity element. Ergo, a category with a single object is a monoid.

Functors are used to map objects of one category to a target category. Note that the target category can be the same as the original category.

Applicative functors allow us to apply functors to one another, combining two boxes together to create another box, if that makes sense.
One example would be a box containing a function and a box containing a value.

Monad can be seen as squashing boxes together. So if we have a box within a box, we can just make it a single box, no nested stuff.
Every monad is also an applicative.
