#+TITLE: CS2104
#+AUTHOR: Joshua Wong

* Lecture 1 :CS2104:
** Benefits of PL features
- Readability
- Extensibility
- Modifiability
- Reusability
- Correctness
- Easy debugging
 
** Haskell features
- Strongly typed with polymorphism
- Higher order function
- Pure and lazy function
- Algebraic
- Exceptions
- Type classes, monads, arrows

** OCaml vs Haskell vs Scala
#+BEGIN_SRC haskell
putStrLn "Helloworld" -- String = IO() String to IO Monad
#+END_SRC

#+BEGIN_SRC
print_endline "HelloWorld" // String -> () the printing is a side effect
#+END_SRC

OCaml supports imperative programming

In Scala, you can declare functions as objects - including static ones

** Lambda Calculus
Lambda calculus is the simplest language out there. It is turing complete and supports features like boolean, loops and data structures.

*** Terms of Lambda Calculus
There are 3 types of terms in lambda calculus
 1. Variable, eg \(\ x \)
 2. Also used for abstraction: \(\Lambda . x\), think of this as function
 3. Applying a function to an argument (Application), \( \mu \: \nu \)

** Functional Programming
Usually, a pure functional language has no update or side effects to allow for easy debugging and abstraction

This paradigm is known as *declarative programming*, which focuses on what is to be done as opposed to how it is done.
Functions and relations are the focus.

There is also usually no state. Simple data transforms are used and especially for Haskell, the data structures are immutable.

* Lecture 2
** Local Binding
Local Binding is a construct to declare a new identifier. The bindings can be either immutable or mutable.
Examples of binding include method params, local vars, pattern matching.

- In Haskell, local variable binds are immutable and the definitions are also recursive by default. OCaml on the other hand is not recursive by default.
- For /x in y/ Haskell expressions, the /y/ is the one returned to the caller.

** Typeful Expressions
#+TITLE: Typeful expressions
#+BEGIN_SRC  haskell
e::t where e is the expression and t is the type

use :t to get the type
#+END_SRC

Haskell also supports type class mechanisms. More about this later, but basically a type class allows us to declare which types are an instance of which class which provides
definitions of the poverloaded operations of said class

** Function Declarations
In Haskell, functions can also be defined via the /let/ keyword because functions are also values.
Haskell also supports multiple and recursive definitions via layout rule.

#+TITLE: Definitions
#+BEGIN_SRC haskell
let quad x =
      let add x y = x + y -- These are nested definitions
          double x = add x x
      in (double x) + (double x)

-- Also, by default, Haskell evaluates function arguments in a left associative nature due to the high precedence of space
-- a b c = (a b) c
-- Use the $ operator a $ b c to change it to a (b c)
#+END_SRC

Also, putting a '' around an infix operator turns it into a prefix operator, like any other Haskell functions. This applies to math operators like /*-+/.

** Data Types
Primitive types are usually very simple, like char and int. It is possible to have a language without primitive types,
like Lambda calculus, but often these are less performant.

Types in Haskell are very high level, and usually are boxed types. It can help to think of boxed and unboxed as analogous to objects/primitives in Java.

/data Int = Int#I#/

Types have also a strong correspondence to logic. This is known as the *Curry Howard Correspondence*

*** Why Boxed
1. Polymorphism requires boxed types. Primitive types have fixed sizes, so when declaring things like list, we
   don't know how much to allocated, but with boxes, we can allocate a constant pointer size
2. Lazy Evaluation as primitives have to be evaluated in order to store it somewhere. Compare this to boxes, where we can
   just store a pointer to the suspended operation and then evaluate it whenever necessary.

*** User Defined Types

**** Sum Type (Core)
This will include things like /t1 | t2 | t3/. This is analogous to disjunction

Includes ordinal and algebraic types

**** Product Type (Core)
This will include things like /(t1, t2, t3)/. This is analogous to conjunction

Includes records and tuple types

**** Record Type
This is very similar to a C struct
#+TITLE: Record
#+BEGIN_SRC
struct Record {
    int num,
    char name[],
}
#+END_SRC

The types are associated with the fields

Record Types are immutable by default in OCaml and it is encouraged.

**** Union Type
Union type is similar to record, except that there is only one field at one time.
So, the fields overlay each other, and the memory allocated to the type is usually the memory required by the largest type the union type can be.

**** Algebraic Type
This is very similar to the union type, except safer and with data constructor tags

**** Pointer Type
Not seen in Haskell, because algebraic data type already implemented as a pointer to boxed value. But in C is meant to capture the address of an object value.

Pointer types are crucial for recursive data type in C. Recursive types are possible in Haskell but can be infinite. NOTE: Don't confuse this with type synonyms.

**** Tuple Type
Tuple differ from record types in that they have no field name, just access by position

**** Ordinal Type
Like an enum, it is also a special case of Algebraic type, because some enums can have operations like additions performed on them etc.

**** Type Synonyms
Type synonyms cannot be recursive in Haskell, unlike in C.
**** Untyped Languages
Essentially just sums different types togther, but without no constructor tags then there is no type safety that can be ensured at both compile and runtime.

*** Pattern Matching
#+NAME: Pattern Matching
#+ATTR_ORG: :width 500
[[file:images/cs2104_l2_1.png]]

** Type Classes
Type classes is like polymorphism for types => defining types by the operations they can potentially support. Like polymorphism, can support overloading.

#+BEGIN_SRC haskell
class Eq a where
  (==), (/=) :: a->a->Biik
  x /= y = not (x == y)
#+END_SRC

Type classes can be extended and open.

#+BEGIN_SRC haskell
instance Eq Integer where
  x == y = x 'integerEq' y
#+END_SRC

Recursive types can be handled but elements need to be given type qualifiers.

*** Class Extension
Haskell also supports the notion of extending from some base class type.

#+BEGIN_SRC haskell
class (Eq a) => Ord a where
  (<), (<=), (>), (>=) :: a->a->Bool
  max, min :: a->a->a
#+END_SRC

Multiple inheritance is also supported.

** Enumeration Class
Supports syntatic sugar for arithmetic sequences /[a..b]/

** Show class
Show class is for types that can be converted to the character string.

** Read Class
Handles the converse of parsing a data structure from a string

** Derived instances
Helps with writing instances for standard type classes can be tedious.

** Direct Handling
Use Maybe type or Either type.

** Language Constructs
For Haskell, we mainly use expression oriented constructs

#+TITLE: Expression Oriented Construct
#+ATTR_ORG: :width 300
[[file:images/cs2104_l3_1.png]]

** Tuple vs Curried Functions
Tuple and Curried Fucntions are isomorphic, you can convert one to the other
(x, y) -> addCurry x y
\ x -> \ y -> addTuple(x, y)

** Recursion and Tail Recursion
Tail Recursion helps to keep the stack size constant.
* Lecture 4
Functions should be first class - value and type, passed as argument, returned, constructed at runtime (lambda), stored in data structures.

** Functions that returns functions
Equivalent to curried functions

** Lazy Evaluation via Function
#+BEGIN_SRC haskell
(\ () -> e)
#+END_SRC

This is very much like a thunk.

Lazy evaluation helps Haskell handle cases like infinite lists well. Though if there is a need for strict evaluation then
use the operator /!/ in front of the expression.
Another option for strict evaluation is the /seq/ keyword, which forces the strict evaluation first - /e1 'seq' e2/. Strict evlauation also occurs before pattern matching.

** Genericity
Replace each constant or function that differs by a parameter.
#+BEGIN_SRC haskell
let foldr f z xs =
      let aux xs =
            case xs of
              [] -> z -- basecase
              y:yx -> f y (aux ys)
      in aux xs
#+END_SRC

This is an example of the fold right operator -> operate on RHS side first.

Fold left is just the opposite -> operator on the RHS first. However, a key thing to note is that fold left operators tend to be *tail recursive*.

#+BEGIN_SRC haskell
let fold l f z cs =  -- z is the accumulator original value
      let aux xs acc =
            case xs with
            | [] -> acc
            | y:ys -> aux (f acc y) ys
      in aux z xs
#+END_SRC

If the reduction /f/ is associative, then we can use fold left or fold right, if not then we have to choose between foldl and foldr carefully.

It is also not always the case that foldl has better performance foldr.

There is also a *Foldable* type class that also has a whole lotta other fold style operations.

** Mapping
map : (a -> b) -> [a] -> b

** Functor
Functor is anything that is mappable.
#+BEGIN_SRC haskell
class Functor f where
  fmap:: (a -> b) -> f a -> f b
#+END_SRC
Map is an the list implementation of fmap


** Composition
Function composition is an instance of functor fmap.
* Lecture 5
** List Comprehension
#+BEGIN_SRC haskell
[f x | x <- ys] -- this is a map
[x | x <- ys, x < 5 ] -- this is a filter
[x | x <- xs, y <- ys] -- this is a concatmap pattern
#+END_SRC
** Arrays
Regarded as functions from indices to values, but for efficient retrieval it is contigous and bounded.

Can also build an array from an association list.
#+BEGIN_SRC haskell
squares = array (1, 100) [i | i <- [1..100]]
#+END_SRC
Since haskell is purely functional, the array must be built in one step (monolithic).

*** Accumulation
#+BEGIN_SRC haskell
accumArray :: (Ix a) => (b->c->b) -> b -> (a,a) -> [Assoc a c] -> Array a b
--                      accum fn init-val bounds  elements
#+END_SRC

** Semi-Groups
#+BEGIN_SRC haskell
class SemiGroup a where
  op :: a -> a -> a
class SemiGroup a => Monoid a where
  unit :: a
#+END_SRC

There are two properties of monoids:
#+BEGIN_SRC haskell
unit `op` x = x `op` unit = x  -- unit is both left and right, its not meant to represent commutativity.
(x `op` y) `op` z = x `op` (y `op` z)
#+END_SRC

Unit is just something that gives back the operator when together with the operator. Note that the properties are not checked by Haskell => So it is up to the user to ensure that the two properties all hold.

** Monads
An expr is referentially transparent if it can be replaced with corresponding value without chaging the program's behavior.

Monads are referentially transparent, but not imperative programming with side effects.

*** Context
Values can be associated with a context, like IO, Maybe type. Once we have a context, we cannot directly apply a function. So the solution is to use the Functor and to define the /fmap/.

*** Applicatives
#+BEGIN_SRC haskell
class Functor f => Applicative (f:: *->*) where
  <*> :: f (a->b) -> f a -> f b
#+END_SRC
However, functions can also be dumped into a context. Applicatives /<*>/ are used in this scenario, because fmap does not apply to functions, only to a value inside a context (See its type defn).
#+BEGIN_SRC haskell
fmap :: (a->b) -> f a -> f b -- type of a is value not a function
#+END_SRC

*** Monads actual
#+BEGIN_SRC haskell
class Monad m where
  (>>=) ::  m a -> (a -> m b) -> m b
#+END_SRC
Note that we take in a monad, a function that returns a monad, and it in turn returns a monad. This also facilitates chaining.
#+BEGIN_SRC haskell
getLine >>= readFile >>= putStrLn

-- do syntantic sugar
foo = do
  filename <- getLine
  contents <- readFile filename
  putStrLn contents

-- also equivalent
getLine >>= \filename -> (readFile filename -> \ contents -> putStrLn contents)
#+END_SRC

List comprehension is a form of do comprehension and do syntactic sugar.

*** Other syntax
#+BEGIN_SRC haskell
class Monad m where
  return :: a -> m a
  >> :: (m a) -> (m b) -> m b -- ignores output of m a
#+END_SRC


*Laws of monad class*
#+BEGIN_SRC haskell
(return a) >>= k = k a
m >>= return m
(m >>= (\a -> (k a) >>= (\b -> h b))) =  m >>= \\a -> k a >>= \b -> h b
#+END_SRC

Note that we cannot extract the value from within the function as it is unsafe.

*** Building Actions
IO operations are just ordinary values that can be passed into data structures, combined using functions like foldr
* Lecture 6
** Monadic Parsing With Haskell
*** Abstract Syntax Tree
Used to represent code fragment as a data structure
*** Context-Free Grammar
1. A set of terminal symbols
2. A set of non-terminal symbols
3. A (non-terminal) start symbols
4. A set of grammar rules of the form <nonterminal> ::= <sequence of terminals and non-terminals>
*** Backus-Naur Form and Extended Backus-Naur form
<integer> ::= <digit>:{<digit>}

#+BEGIN_SRC
EBNF for Haskell Fragment
<expression> ::=
  <lowercase-identifier>
  | <constants>
  | let <pattern> = <expr> in <expr>
  | if <expr> then <expr> else <expr>
  | \ {<pattern>}+ -> <expression>     -- + means more than one
  | <expression> {<expression>}+
#+END_SRC
*** Regular Grammar
Regular Grammar is a subset of CFG with different grammar rules:
<nonterminal> ::= <terminal>|<nonterminal>}

Regular grammars can be recognized by a finite state machine (and tail recursive methods).
*** Syntax Analysis
We can use Algebraic types like /data Token = | t0 blah | t1 blah |/ to help us divide stuff into Tokens and Expressions.
*** Parsers
A generic parser is expected to have the following type:
#+BEGIN_SRC
data Token = ...
type Tokens = [Token]
type Parser a  = Tokens -> (a, Tokens) ;; consumes the token to produce parse tree object of type A and the remaining tokens.
#+END_SRC

We can apply this logic to constant parsers, keyword parsers etc, and then look to combine them to create a more complete parser.

*** Sequential Parsing
#+BEGIN_SRC
(~~) :: Monad SParsec => SParsec a -> SParsecb -> SParsec(a, b)
#+END_SRC

#+NAME: Generic Parsing
#+ATTR_ORG: :width 400
[[file:images/cs2104_l7_1.png]]

We can also support other operators, ie to say stuff like allowing us to choose between a parser A and parser B via disjunction.

*** Parser Mapping
Map functions can be used to change the output of a parser via a map function.
*** Parser Repetition
Another form of repetition involves trying to repeat the same parser over and over again.

** Arithmetic Grammar Rule
Use EBNF to handle left associativity as left recursion and right recursion both have their issues.

* Lecture 8
** Prolog
Prolog atoms are constants (starts with lower case). Variables start with upper-case or underscore. There is no typing.

Terms are used to form tree-like data structures:
#+BEGIN_SRC
node(node(dog, nil)), leaf(cat)
#+END_SRC

We can also mix terms with nodes
#+BEGIN_SRC
node(2, Y)
#+END_SRC

Prolog specifies relations rather than functions. In functions, inputs and outputs are fixed, but for Prolog, they just try to relate the number of parameters.
#+NAME: Relation vs Function
#+ATTR_ORG: :width 400
[[file:images/cs2104_l8_1.png]]

*** Adding as a relation
#+BEGIN_SRC
add(5, 4, R) adding
add(5, Y, 9) subtracting
add(5, 4, 9) checking
add(X, Y, 9) enumerating
#+END_SRC

*** Derived Facts via Horn Clauses
Left hand side is a single relation that is implied by the right hand side.
Right hand side is usually the stronger condition.
#+BEGIN_SRC
pred(..) :- pred1(..), pred2(..)...

pred1(...)&&pred2(...)... -> pred(...)

parent(X,Y) :- father(X,Y); mother(X,Y) -- ; means disjunction
#+END_SRC

Horn clauses may be recursive, but be careful with left recursion due to DFS search procedure.

*** List
[1,2,3,4] is a list.

In order to break into head and tail, we can use either
1. /.(H,T)/
2. /[H|T]/

Appending can be done using the following syntax
#+BEGIN_SRC
append([], Y, Y)
append([X|Xs], Y, [X|Rs])
#+END_SRC

*** Unification
Unification fundamentally denotes equality, or can RHS match LHS.

Unification /t1=t2/ may contains variables. The system computes a substitution such that the two terms are now equal. Once the variable is bound, the value cannot be changed (single assignment property).

*** Resolution
Resolution - the process of answering a query.

Pattern-matching is a special case of unification. Resolution occurs by renaming all the variables in a row multiple times.

*** Arithmetic
Arithmetic expression is evaluated by the is-operator.

#+BEGIN_SRC
X is 3+4 -- True
7 is 3+4 -- True
7 is X+4 -- False, because RHS input is not known
#+END_SRC

*** Selection
#+BEGIN_SRC
sel (X, [X|_]).  -- means false
sel (X, [_|T]) :- sel (X,T) -- this recursively searches the tail until found
#+END_SRC

*** Negation and Cut operator
In Prolog, whatever that cannot be proven is assumed to be False. This is known as the closed-world assumption.

#+BEGIN_SRC
remDup([], [])
remDup([H|T], R) :- sel(H,T), !, remDup(T, R)
remDup([H|T], [H|R]) :- remDup(T, R)
#+END_SRC
This means that if /sel(H,T)/ succeed, do not backtrack. If it fails, backtrack to try 3rd clause. Basically now it is an if then else condition.

*** Impure Prolog
- atom(X) succeeds if X is bound to atom
- var(X) succeeds if free variable
- integer(X) succeeds if bound to integer
- write(X) output binding of X

Impure because for example, atom is dependent on when it is called on X, before it is bound to atom or after.

*** Finite Domain Constraints
#+BEGIN_SRC
X #> 3 retuns X in 4..sup

cfact(0, 1).
cfact(N, R) :- N#>0, M #= N-1, R #= N*R1, cfact(M,R1)
#+END_SRC

Runtime for constraint solvers can be very long though, for obvious reasons.

* Lecture 9 :OCaml:
#+NAME: Recap
#+ATTR_ORG: :width 400
[[file:images/cs2104_l9_1.png]]

Recall: OCaml uses strict evaluation because of its imperative features.
If you want to have lazy evaluation, OCaml provides a /Lazy.t/ library.

Also, note that type variables are written as /`a/ in OCaml.

** When to use Imperative
Certain high performance considerations and because in general, we want to model the real world.

For example, we do not want to actually store a database as an immutable object

** Mutable Reference
#+BEGIN_SRC
let ptr = ref 10;;

ptr := !ptr + 1;;
#+END_SRC

OCaml also supports mutable records
#+BEGIN_SRC
type (`a, `b) pair = {mutable first :`a; second: `b};;
p1.first <- p1.first + 1;;
#+END_SRC

In fact, each ref type is implemented as a record with one field, so ref type is just a syntactic sugar.

However, mutable field types must not be polymorphic (its weak polymorphic to be specific). this is so that update and retrieval remains consistent => eg turn a list into list of strings midway through the program, this will create a runtime error.
What this means is that at compile time, the type isnt exactly set but once the variable is instantiated it now has a type, and this type will be enforced.

** Loops
OCaml supports both for loops and while loops. However, the difference between the while loop and the for loop is that
the for loop does not have control over its iterating condition.
However, these loops are also syntactic sugar for recursive functions with a referential index.

For loops also have /to/ and /downto/ syntax for iterating up and down respectively.

** List iterator
#+BEGIN_SRC
List.iter : ('a -> unit) -> 'a list -> unit
#+END_SRC

** Sequences
Sequences of the form /e1;e2;e3;.../ are executed for their effects.

However, we want to check if the effects were successfully applied.
#+BEGIN_SRC
let () = e1 in
let () = e2 in
...
#+END_SRC
Using the let statement allows us to use the type checker by utilizing the void value.

Also note that evaluation order of arguments in Haskell is implementation dependent.

** Mutable Modules
These are libraries that implement mutable data structures. Currently only records are mutable.

The first is the array. Array size cannot be changed, but otherwise we can do our usual update operations.

For strings, we can modify a character of the string.

Hashtable behaves like a dictionary and it can automatically resize itself.
