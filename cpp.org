#+TITLE: Cpp
#+AUTHOR: Joshua Wong

Based on the Book "A Tour of C++ (2013)" By Stroustrup. The syntax used is C++11

* Chapter 1: Basics
** Immutabiity
#+BEGIN_SRC cpp
const // means that the value will not be changed
constexpr // means that an expression will be evaluated at compiled time - to specify constants
// and to place data in read only memory
#+END_SRC
** For Loops
#+BEGIN_SRC cpp
for (auto& x: arr) // to get a reference
for (auto x: {1,2,3,4})
#+END_SRC

On that note, references are similar to a pointer, but you don't need to dereference it to use the value.
A reference also cannot be modified to refer to a different object.

* Chapter 2: User Defined Types
Structs and classes are the same.

#+BEGIN_SRC cpp
// One way of writing a constructor unlike the Java way
Vector(int s): elem{new double[s]}, sz{s} {} // where elem is a double* and sz and int
#+END_SRC

** Union Types
A struct where all members are allocated at the same address so that the union occupies as much space
as its largest member.

#+BEGIN_SRC cpp
union Value {
    char *s;
    int i;
};
#+END_SRC

It is up to the user to do the type checking to see which field of the union struct is used.

** Enumerations
#+BEGIN_SRC cpp
enum class Color {red, blue, green};
// Usage
Color::red;
#+END_SRC

If enum values are to be ints, the 'class' keyword can be removed from 'enum class'. Then the values will be
auto-converted to int values. So red = 0, blue = 1, and green = 2.

* Chapter 3: Modularity
** Namespaces
Namespaces help to organize large components and prevent any name clashes.
#+BEGIN_SRC cpp
namespace Test {
    int main();
}

int Test::main() {return 1;};
#+END_SRC
** Error Handling
Function that should never throw an error can be declared using 'noexcept'.
#+BEGIN_SRC cpp
void user(int sz) noexcept {
    //...
}
#+END_SRC

If this function throws an error, then stdlib function `terminate()` is called to terminate program.
** Static assertions
Static assertions are run at compile time on properties that are known at compile time. Failures are reported
as compiler error messages.
#+BEGIN_SRC
static_assert(condition, "statement")
#+END_SRC

* Chapter 4: Classes
** Concrete classes
Representation of concrete class is part of its definition. This allows us to place concrete types on stack and refer to them directly.

Functions defined in a class are inlined by default.

** Destructors
The name of a destructor is the complement operator, /~/ followed by the name of the class (think of it as the complement of
the constructor): /~Vector()/.

In general, we want to avoid allocations in general code to make it less prone to memory leaks.

** Abstract Types
#+BEGIN_SRC cpp
class Container {
public:
  virtual double &operator[](int) = 0;
  virtual int size() const = 0;
}
#+END_SRC

Strictly speaking, the virtual keyword just means that the keyword may be redefined later on.
The /=0/ syntax means that the function is pure virtual, in essence making the class an abstract class.

Abstract classes may also have their own virtual destructor functions despite the lack of a constructor. This is because
abstract classes tend to be manipulated via references and pointers, so if another person is trying to destroy it
they will not know explicitly what resources are owned by the object.

** Inheritance
A class can inherit from an abstract class or normal class using the /:public/ keyword.
#+BEGIN_SRC cpp
class Concrete :public Abstract {
}
#+END_SRC

Explicit overriding can be triggered using the /override/ keyword next to the member function definition.
This has the benefit of serving as an additional check as we will now throw errors when there is not corresponding
function in the base class.

** Copy and Move
When a class is a resource handle, the default memberwise copy is usually erroneous as we might end up with a situation
where 2 objects refer to the same resource.

#+BEGIN_SRC cpp
Vector(const Vector &a); // copy constructor
Vector& operator=(const Vector &a); // copy assignment

Vector(Vector &&a); // move constructor
Vector& operator=(Vector &&a); // move assignment
#+END_SRC

Copying of an object is defined by copy constructor and copy assignment. These involving explicitly allocating memory
in the target object and copying the information over.

Move, in my own words, is like stealing the resources from another class, as opposed to copying their values over.
Note that the move operation operates on an rvalue, which can never be assigned to, which ensures
that we can safely steal its value.

After a move, a moved-from object should be in a state that allows a destructor to be run. However, we should
also allow assignment to a moved-from object.

In certain cases, return also counts as a move, depends on the compiler's return value optimization.
#+NAME: Move (Return)
#+ATTR_ORG: :width 600
[[file:images/cpp_chap4_1.png]]

** Essential Operations
There are 5 situations in which an object is copied or moved:
1. As source of assignment
2. As an object initializer
3. As a function argument
4. As a function return value
5. As an exception.

In all these cases, the copy or move constructor will be applied unless optimized away by compiler.
These special member functions will be generated by the compiler, though if there's a pointer involved, better to
define it yourself.

** Resource Management
Resource handles like Vector are an alternative to pointers.
In fact, it is recommended that before resorting to GC, use resource handles first.
Ensure that each resource has an owner in a scope and that it is released at the end of the scope.
This is known as Resource Allocation Is Initialization (RAII).

** Suppressing Operations
If we want to delete the default copy and move operations, we can use the /=delete/ keyword at the end of the member
function definition.

* Chapter 5: Templates
C++ templates are not the same as Java Generics. In fact they are more like Macros rather than Java Generics, which are
only run at compile time.

#+BEGIN_SRC cpp
template<typename T>
class Vector {
 // ...
};

// Templates can also take in value arguments
template<typename T, int n>
class Something {
    using value_type = T;
    constexpr int size() {return N};
    // Alias value_type and constexpr allows user to get read only access to the template arguments
}
#+END_SRC

Templates need not only used to define classes and struct but can also be used to parameterize types and algorithms (functions).

** Function Objects
These templates are also known as functors. These objects can be called like functions.

#+BEGIN_SRC cpp
template<typename T>
class Less_than {
    const T val;
public:
    Less_than(const T &v) { val = v; };
    bool operator()(const T &x) {return x < val};
};

Less_than<int> lti(42);
#+END_SRC

These function objects are often used as arguments to algorithms and can be included as a template value.
A common example this is a predicate being passed as an argument.

However, defining function objects is tiresome as it is usually only used once, so we usually just a lambda expression.
#+BEGIN_SRC cpp
[&](int a) {return a < x}; // Lambda expression for less than. [&] is a capture list.
#+END_SRC

** Variadic Templates
Templates can be defined to accept an arbitrary number of arguments of arbitrary types.
#+BEGIN_SRC cpp
template<typename T, typename ...Tail>
// Stuff below here
#+END_SRC
