#+TITLE: CS2102

* Lecture 1 :CS2102:
** Basic terminology
We typically use tables to represent relations as all relations can be expressed as tables. Not vice versa

The data is represented via attribute values we are interested in. These values cannot be decomposed (atomic).

- A *value* is the each "cell" in the database.
- An *attribute* is the header of the column. If you view the column as a set, then it is the name of the set
- A *schema* is an ordered row of all the attributes of the table.
- A *domain* is the unique set of all values of an attribute w/o the attribute name itself.
- *Arity* is the number of attributes/columns in the table.
- *Cardinality* is the number of rows, though this is often less important.
- *Relational Database Schema* is the schemas of tables that make up a database. Data can be omitted. Often contains *constraints*.

** Logical Groundings
If we see each table column as a set, then it is easy to see tables as a subset of the Cartesian product of all the table columns. Subset because of course there are some cartesian product values that we do not use.

** Anatomy of Database
For there to be valid data, there needs to be a relation instance that satisfy certain constraints. Constraints can come in the form of types like /VARCHAR, INT/ etc, or stuff like key constraints

*** Keys
**** Superkey
Superkeys are a combination of attributes that can be used to uniquely identify data (a row of values).

For example, this may take the form of /(Height, Name)/ or /(ID)/
**** Key
Key is a minimal superkey, in other words, a superkey set that does not contain a smaller superkey. Note that this is not the minimum superkey

Using the example above /(Height, Name)/ and /(ID)/ are both keys but ID is the minimum superkey because it has the least attributes
**** Primary Key
Primary key is just the key that the user uses to uniquely identify each row/data in the table.
**** Foreign Key
Also known as existential dependency
This is applied to an attribute, and all values of this attribute now depend on the existence of another value on a different row on the same table or different table

Acts as a link between the 2 tables by referencing primary key of another table.
Foreign keys used to accept null values, but deprecated as of later SQL versions.

Insertion of Foreign Keys looks like that - If anyone of the value is /NULL/, insert. Else if it exist, also can insert into the referencing table. Must also reference primary keys.

If its an individual reference, then we must do the comparison individually. What this means is that we do the comparison column by column, checking if that value is NULL or present in the table. With multiple references, then we can just do an OR comparison with /NULL/ values, that is, if any of the columns are /NULL/, then it is ok to insert. See [[https://coursemology.org/courses/1904/assessments/39097][Lecture 01C: Foreign Key]] for more details

** Three Valued Logic of SQL
SQL has 3 forms of logic: True, False and Unknown (NULL)

NULL often lends itself to some weird logic. For example, the relationship /NULL && true/ evaluates to NULL, because the result is not known
(Could be true or false depending on actual value of /NULL/)

There may be different "types" of NULL as well: For example, /True && NULL/ evaluates to /NULL/, but so does /1 + NULL/

NULL just means could be anything. As such, it is not possible to use an equality sign with NULL, because how can you possibly check the equality of two values that mean nothing.
To do this, we use the /IS NOT DISTINCT/ operator. /NULL/ and /NULL/ are not distinct.

* Lecture 2
** Relational Calculus vs Relational Algebra
Relational Calculus is more declarative, as compared to relational algebra which is more imperative.

** Key concepts

Universal Relation/Table. The relations in the DB can be seen as one giant table and relation. This will come in handy later for stuff like cartesian products.

** Unary Operators

*** \(\sigma\) - Selector
This just selects rows from the table based on a given criteria. It selects whole rows, ie to say does not remove column etc

*** \(\pi\) - Projection
Projection selects columns from the table. The result is a set, so if there are some results that are duplicated, it will be removed by the operation

*** Rename
Rename just renames the columns/attribute names, it renames all the attributes at once.

** Binary Operators
1. & Intersection
2. | Union
3. - Difference
4. x Cartesian product (Pick one form LHS and match with each from RHS.). We treat cartesian operators as associative in CS2102 due to isomorphism.

Stuff like cartesian products come in handy when we have to do selection from multiple tables.

*TIP*: Cartesian products can usually be made smaller and more performant by doing selection before cartesian product.

*** Union compatability
The above operations require union compatability to work. There are two conditions
1. Same arity (number of cols)
2. Same domain (type) for each attribute

** Closures
  Given a set of operators \(O\) and a set \(S\), \(S\) is a closure iff for every operator in \(O\), the input to the operator and the output are in \(S\).

  For the binary operators given above and the relations, the relations is a closed set.

** Joins
*Dangling Tuple* are tuples in join operands that do not participate in a join operation.

Inner joins remove any dangiling tuples whereas outer joins add them with a /NULL/ value.

Full outer join can be represented by left outer join \(\cup\) right outer join.
Below is a good image to show the differences between the various outer joins. Note the positioning of the /NULL/ values.

#+NAME: Outer joins
#+ATTR_ORG: :width 600
[[file:images/cs2102_l2_2.png]]

Natural joins are like inner joins, except that they just remove the corresponding attributes which are the same during the join. There is also no /NULL/.

#+NAME: Natural Join
#+ATTR_ORG: :width 600
[[file:images/cs2102_l2_1.png]]
* Lecture 3

SQL is in general case insensitive, but good to be consistent

** Tables
Built in data-types size may differ from implementation to implementation.

Go for VARCHAR instead Of CHAR as it is faster. Also note that all the data types support a NULL value.

Column constraints help to check a given column and reject on False. Keywords include /PRIMARY KEY, UNIQUE, NOT NULL, CHECK/. Though you can check another column if in another column.

Table constraints checks the given table and reject on False. It is different from column constaints in that we can check for multiple column constraints at the same time. For example /PRIMARY_KEY (c1, c2 ..)/ instead of just /PRIMARY_KEY/.

/PRIMARY_KEY/ must be unique and NOT NULL

For Foreign keys, if /A/ refers to /B/, then /B/ must be a candidate key.

*** Foreign Key Action
Two types of actions: ON DELETE AND ON UPDATE

Useful actions include /CASCADE, SET DEFAULT, SET NULL/

*** Altering a Table
/ALTER TABLE table_name action/

Can add, drop columns and column constraints

/INSERT INTO table_name (col1, ... ,coln) VALUES (v1, ..., vn)/ . If no col, then we assume default ordering.

/DELETE FROM table_name WHERE condition/ to remove.

/UPDATE table_name SET column_name = expression WHERE condition/

*** Asking a Table
/SELECT DISTINCT a1, a2, a3 from t1, t2, t3 where condition/. We use /SELECT DISTINCT/ to maintain a one to one correspondence with relational algebra which removes duplicates.
* Lecture 4
** Entity Relationship Model
1. Attributes - Describe real world object
2. Entities - real world object, can be seen as collection of attributes.
3. Relationships - association between entities

Drawbacks: Cannot capture candidate keys, only primary key.

Entities can be represented by a table. Relationship sets on the other hand, can be also represented as a table, albeit with a foreign key.

Relationship cannot have its own separate identities (attributes that do not make sense on it).

#+NAME: Relationship Constraints
#+ATTR_ORG: :width 400
[[file:images/cs2102_l4_1.png]]

** Additional ER concepts
*** Weak Entity Sets
Identity Dependency where the attribute of an entity cannot uniquely identify an entity

Existential Dependency states that the existence of an entity depends on another entity, but it can be uniquely identified.

*** IS-A hierachy
Specialized entity sets inherit attributes from generalized attribute sets.

There are two constraitns: Overlap if an entity can belong to multiple specialized subclasses and Covering if every generalized entity has to be in some specialized set.

*** Aggregation
Higher order entity where a relationship set is treated as an entity set.

** ER to SQL
Identity attribute to primary key, rest of them to attributes

For relationship, if unconstrained, just make the entity identity attrs primary key.

If there's a key constraint for one identity, then can set the primary key of relationship table to be that entity's primary key, or combine that entity with the relationship table.

If there's a key + total participant constraint for one of the entity, then the relationship table will have to be combined with that entity's table.

For roles, just add them as an foreign key attribute

Identity dependency will put primary key as both the weak entity's id and the main entity's id, and theres an on delete cascade.
Existential dependency will have the on delete cascade but the weak entity will have an attribute that can serve as primary key

IS-A will have an on delete cascade with subtables if no covering constraint, else there's no need for a main table.

For aggregation, just treat the aggregated relation as a table an an indpendent relation and use it as a reference in another table.
